package org.example.popitka2.controller.ForMfc_Emplyee;

import org.example.popitka2.repository.AppointmentRepository;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.ui.Model;

import java.time.LocalDate;
import java.time.LocalDateTime; // ‚úÖ –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏

import org.example.popitka2.service.AppointmentService; // ‚úÖ –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ –ø—Ä–∏–µ–º
import org.example.popitka2.service.MoskvichCardService; // ‚úÖ –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –∫–∞—Ä—Ç—É –º–æ—Å–∫–≤–∏—á–∞
import org.example.popitka2.model.Appointment; // ‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º

import java.security.Principal;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.web.bind.annotation.GetMapping;

import org.example.popitka2.repository.UserRepository;
import org.example.popitka2.model.User;
import org.example.popitka2.model.Role;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;





@Controller
@RequestMapping("/mfc")
public class MfcController {
    private final AppointmentService appointmentService;
    private final MoskvichCardService cardService;
    private final UserRepository userRepository;
    private final AppointmentRepository appointmentRepository;


    public MfcController(AppointmentService appointmentService, MoskvichCardService cardService, UserRepository userRepository, AppointmentRepository appointmentRepository) {
        this.appointmentService = appointmentService;
        this.cardService = cardService;
        this.userRepository = userRepository;
        this.appointmentRepository = appointmentRepository;
    }

    // –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –Ω–∞ –ø—Ä–∏–µ–º
    @GetMapping("/appointments")
    public String viewAppointments(Model model) {
        model.addAttribute("appointments", appointmentService.getAllAppointments()); // –ü–µ—Ä–µ–¥–∞–µ–º –∑–∞–ø–∏—Å–∏
        return "mfc_appointments";
    }


    @PostMapping("/appointments/book")
    public String bookAppointment(@RequestParam String patientName,
                                  @RequestParam String birthDate,
                                  @RequestParam String phoneNumber,
                                  @RequestParam String doctor,
                                  @RequestParam LocalDateTime appointmentDate,
                                  @RequestParam(required = false) String reason,
                                  @RequestParam String place) {

        LocalDate parsedBirthDate = LocalDate.parse(birthDate);
        System.out.println("üìå –ú–µ—Ç–æ–¥ bookAppointment() –≤—ã–∑–≤–∞–Ω! –î–∞–Ω–Ω—ã–µ: " + patientName);

        appointmentService.bookAppointment(patientName, parsedBirthDate, phoneNumber, doctor, appointmentDate, reason, place);

        return "redirect:/mfc/appointments";
    }


    // –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞
    @PostMapping("/appointments/{id}/complete")
    public String completeAppointment(@PathVariable Long id) {
        appointmentService.completeAppointment(id);
        return "redirect:/mfc/appointments";
    }

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –ú–§–¶
    @PostMapping("/appointments/{id}/edit")
    public String editAppointment(@PathVariable Long id,
                                  @RequestParam String patientName,
                                  @RequestParam String doctor,
                                  @RequestParam LocalDateTime date,
                                  @RequestParam String place) {
        appointmentService.updateAppointment(id, patientName, doctor, date, place);
        return "redirect:/mfc/appointments";
    }

    // –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –Ω–∞ –∫–∞—Ä—Ç—É –º–æ—Å–∫–≤–∏—á–∞
    @GetMapping("/moskvich_card")
    public String viewCardRequests(Model model) {
        model.addAttribute("cardRequests", cardService.getAllRequests());
        return "moskvich_card_success";
    }

    @GetMapping("/moskvich_card/success")
    public String viewAllCardRequests(Model model) {
        model.addAttribute("cardRequests", cardService.getAllRequests()); //–ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
        return "moskvich_card_success";
    }


    @GetMapping("/moskvich_card/request")
    public String processMoskvichCardRequest(Principal principal, Model model) {
        String username = principal.getName();
        String requestNumber = cardService.getRequestNumberByUsername(username);

        System.out.println("üîç –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –º–æ—Å–∫–≤–∏—á–∞ –æ—Ç: " + username);
        model.addAttribute("username", username);
        model.addAttribute("requestNumber", requestNumber);

        return "moskvich_card_request";
    }

    @GetMapping("/dashboard")
    public String showMfcDashboard(Principal principal) {
        User user = userRepository.findByUsername(principal.getName()).orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        System.out.println("üîç –†–æ–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + user.getRole());

        if (!user.getRole().equals(Role.MFC_EMPLOYEE)) {
            throw new AccessDeniedException("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.");
        }

        return "mfc_dashboard";
    }



    @GetMapping("/appointments/book")
    public String showBookAppointmentPage() {
        System.out.println("‚úÖ –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º!"); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
        return "mfc_book_appointment"; //
    }


    @PostMapping("/appointments/update")
    public String updateAppointment(@RequestParam Long appointmentId,
                                    @RequestParam String patientName,
                                    @RequestParam LocalDate birthDate,
                                    @RequestParam String phoneNumber,
                                    @RequestParam String doctor,
                                    @RequestParam LocalDateTime date,
                                    @RequestParam String reason,
                                    @RequestParam String place,
                                    @RequestParam String status) {
        Appointment appointment = appointmentRepository.findById(appointmentId)
                .orElseThrow(() -> new RuntimeException("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));

        appointment.setPatientName(patientName);
        appointment.setBirthDate(birthDate);
        appointment.setPhoneNumber(phoneNumber);
        appointment.setDoctor(doctor);
        appointment.setDate(date);
        appointment.setReason(reason);
        appointment.setPlace(place);
        appointment.setStatus(status);

        appointmentRepository.save(appointment); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î

        return "redirect:/mfc/appointments"; // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π
    }
    @GetMapping
    public String showDashboard(Principal principal, Model model) {
        model.addAttribute("username", principal.getName()); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return "mfc_dashboard"; // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞–Ω–µ–ª—å –ú–§–¶
    }
    @GetMapping("/reports")
    public String showReportsPage() {
        return "development";
    }

    @GetMapping("/support")
    public String showSupportPage() {
        return "development";
    }

    @GetMapping("/settings")
    public String showSettingsPage() {
        return "development";

    }

    @PostMapping("/moskvich_card/update_status")
    public String updateCardStatus(@RequestParam Long requestId,
                                   @RequestParam String newStatus,
                                   RedirectAttributes redirectAttributes) {
        cardService.updateCardStatus(requestId, newStatus);
        return "redirect:/mfc/moskvich_card";
    }


}
